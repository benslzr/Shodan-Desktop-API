using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Drawing;
using System.IO;
using System.Net;
using System.Windows.Forms;

namespace WindowsFormsApp3
{
    public partial class Form1 : Form
    {
        //Global Variables
        int comboIndex1 = 0;
        int comboIndex2 = 0;

        private static string masterAPIkeyValue = "";
        public static string MasterAPIkeyValue { get => masterAPIkeyValue; set => masterAPIkeyValue = value; }




        public Form1()
        {
            InitializeComponent();
            //Hides API key textbox in menu
            txtKey.Visible = false;        
        }
        
        private void button1_Click(object sender, EventArgs e)
        {
            try {
                if (String.IsNullOrEmpty(txtExampleOutput.Text)) {
                    MessageBox.Show("Please create connection string first");
                } else {
                    var client = new WebClient();
                    client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");
                    var response = client.DownloadString(txtExampleOutput.Text);
                    try {
                        var releases = JObject.Parse(response);
                        textBoxOutput.Text = releases.ToString();

                    } catch {
                        var releases = response;
                        textBoxOutput.Text = releases.ToString();
                    }
                }
            }
            catch (Exception ex) {
                    //Prints out exception
                    MessageBox.Show(ex.ToString());
            }
        }

        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            const string message = "Do you want to exit?";
            const string caption = "EXIT";
            var result = MessageBox.Show(message, caption, MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (result == DialogResult.Yes)
            {
                Application.Exit();
            }
            else if (result == DialogResult.Yes)
            {
                this.Close();
            }
        }

        private void ScrollTextBox(object sender, MouseEventArgs e)
        {
            // Check scroll amount (+ve is upwards)
            int deltaWheel = e.Delta;
            if (deltaWheel != 0)
            {
                // Find total number of lines
                int nLines = textBoxOutput.Lines.Length;
                if (nLines > 0)
                {
                    // Find line containing caret
                    int iLine = textBoxOutput.GetLineFromCharIndex(textBoxOutput.SelectionStart);
                    if (iLine >= 0)
                    {
                        // Scroll down
                        if (deltaWheel > 0)
                        {
                            // Move caret to start of previous line
                            if (iLine > 0)
                            {
                                int position = textBoxOutput.GetFirstCharIndexFromLine(iLine - 1);
                                textBoxOutput.Select(position, 0);

                            }
                        }
                        else // Scroll up
                        {
                            // Move caret to start of next line
                            if (iLine < (nLines - 1))
                            {
                                int position = textBoxOutput.GetFirstCharIndexFromLine(iLine + 1);
                                textBoxOutput.Select(position, 0);
                            }
                        }
                        // Scroll to new caret position
                        textBoxOutput.ScrollToCaret();
                    }
                }
            }
        }

        private void toolStripStatusLabel1_Click(object sender, EventArgs e)
        {
            try
            {
                //Create API Call
                String checkUser = "i";
                checkUser = "https://api.shodan.io/account/profile" + "?key=" + txtKey.Text;

                //Parse Data to JSON.net Object
                var client = new WebClient();
                client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");
                var response = client.DownloadString(checkUser);
                var releases = JObject.Parse(response);

                //Isolate JSON Values in Object
                string jsMember = (string)releases["member"];
                string jsCredits = (string)releases["credits"];
                string jsDisplayName = (string)releases["display_name"];
                string jsCreated = (string)releases["created"];

                string userInfo = "Agent Info: " + " " + "CREDITS:" + jsCredits + "     " + "EMAIL:" + jsDisplayName;

                toolStripEmail.Text = jsDisplayName;
                toolStripCredits.Text = jsCredits;
                toolStripKey.Text = txtKey.Text;

                //toolStripCreditValue.Text =  releases.ToString();
            }

            catch (Exception ex)
            {
                MessageBox.Show("Your API Key is Invalid. Please try again.");
            }
        }

        private void buttonReverse_Click(object sender, EventArgs e)
        {
            String callResolveHost = "https://api.shodan.io/dns/reverse?ips=" + txtURLip.Text + "&key=" + txtKey.Text;
            var client = new WebClient();       //Parse Data to JSON.net Object
            client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");
            var response = client.DownloadString(callResolveHost);
            var releases = JObject.Parse(response);
            JsonTextReader reader = new JsonTextReader(new StringReader(response));

            while (reader.Read())
            {
                if (reader.Value != null)
                {
                    Console.WriteLine("Token: {0}, Value: {1}", reader.TokenType, reader.Value);
                }
                if (reader.TokenType == JsonToken.String )
                {
                    Console.WriteLine(reader.Value);
                    txtHostname.Text = (string)reader.Value;
                }
            }
        }

        private void buttonResolve_Click(object sender, EventArgs e)
        {
            //DNS Hostname Resolve API Call
            //api.shodan.io/dns/resolve?hostnames={hostnames}&key={YOUR_API_KEY}

            String callResolveHost = "https://api.shodan.io/dns/resolve?hostnames=" + txtHostname.Text + "&key=" + txtKey.Text;

            //Parse Data to JSON.net Object
            var client = new WebClient();
            client.Headers.Add("user-agent", "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36");
            var response = client.DownloadString(callResolveHost);
            var releases = JObject.Parse(response);

            //Isolate JSON Values in Object
            string jsHostIP = (string)releases[txtHostname.Text];
            string hostIP = jsHostIP;
 
            //Change the value of the IP from the hostname DNS lookup
            txtURLip.Text = hostIP;


            //toolStripCreditValue.Text =  releases.ToString();

        }

        private void aPISettingsToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Form2APIsettings frm2 =  new Form2APIsettings();
            //ShowDialog() waits until form has closed to run remaining code.
            frm2.StartPosition = FormStartPosition.Manual;
            frm2.Location = new Point(10, 10);
            frm2.ShowDialog();
            updateExample(comboIndex1,comboIndex2);


            //After Form2 is closed... 
            txtKey.Text = MasterAPIkeyValue;
            toolStripStatusLabel1_Click(sender, e);


        }

        private void connectToolStripMenuItem_Click(object sender, EventArgs e)
        {
            txtKey.Text = MasterAPIkeyValue;
        }

        private void fileToolStripMenuItem_Click(object sender, EventArgs e)
        {

        }

        private void comboPart2URL_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtURL2.Text = (String)comboPart2URL.SelectedItem;
            Console.WriteLine(comboPart2URL.SelectedIndex);
            comboIndex1 = comboPart2URL.SelectedIndex;
            updateExample(comboIndex1, comboIndex2);
        }

        private void comboPart3URL_SelectedIndexChanged(object sender, EventArgs e)
        {
            txtURL3.Text = (String)comboPart3URL.SelectedItem;
            Console.WriteLine(comboPart3URL.SelectedIndex);
            comboIndex2 = comboPart3URL.SelectedIndex;
            updateExample(comboIndex1, comboIndex2);
        }

        private void checkFacets_CheckedChanged(object sender, EventArgs e)
        {
            buttonUpdate(sender, e);
        }

        private void button3_Click(object sender, EventArgs e)
        {
            txtURL2.Text = null;
            txtURL3.Text = null;
            txtQuery.Text = null;
        }

        private void buttonUpdate(object sender, EventArgs e)
        {
            try
            {
                if (txtKey.Text.Length < 32)
                {
                    MessageBox.Show("Please add a valid API Key. (Settings -> API Settings)");
                }
                else
                {
                    updateExample(comboIndex1, comboIndex2);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show("Other Issue");
            }
        }

        private void updateExample(int comboIndex1, int comboIndex2)
        {
            String exampleStr = null;

            if (comboIndex1 == 0)
            {
                int value = comboIndex2;

                switch (value)
                {
                    case 0:             //Search Methods
                        Console.WriteLine("-- Search Methods --");
                        break;
                    case 1:             //host/{ip}
                        exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + "host" + "/" + txtURLip.Text + "?key=" + txtKey.Text;
                        txtURL3.Text = "host";
                        break;
                    case 2:             //host/count
                        txtURL3.Text = "host/count";
                        exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text + "&query=" + txtQuery.Text + ":" + txtQuery.Text + "&facets=" + comboFacet.SelectedItem;
                        break;
                    case 3:             //host/search
                        txtURL3.Text = "host/search";
                        if (checkFacets.Checked)
                        {
                            exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text + "&query=" + comboQuery.SelectedItem + txtQuery.Text + "&facets=" + comboFacet.SelectedItem;
                        }
                        else
                        {
                            exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text + "&query=" + comboQuery.SelectedItem + ":" + txtQuery.Text;
                        }
                        break;
                    case 4:             //host/search/tokens
                        txtURL3.Text = "host/search/tokens";
                        if (checkFacets.Checked)
                        {
                            exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text + "&query=" + txtQuery.Text + "&facets=" + comboFacet.SelectedItem;
                        }
                        else
                        {
                            exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text + "&query=" + txtQuery.Text;
                        }
                        break;
                    case 5:             //ports
                        txtURL3.Text = "ports";
                        exampleStr = txtAPIurl.Text + "/" + "shodan" + "/" + txtURL3.Text + "?key=" + txtKey.Text;
                        txtHostname.ReadOnly = true;
                        txtURLip.ReadOnly = true;
                        txtQuery.ReadOnly = true;
                        comboFacet.Enabled = false;
                        comboPart2URL.Enabled = false;
                        //comboPart3URL.Enabled = false;
                        break;

                }
                //Write string to log, and change text..
                Console.WriteLine(exampleStr);
                txtExampleOutput.Text = exampleStr;
            }
        }

    }
}


